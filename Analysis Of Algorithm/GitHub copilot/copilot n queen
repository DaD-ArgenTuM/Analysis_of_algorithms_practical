# N-Queens Problem using Backtracking

def print_solution(board):
    for row in board:
        print(" ".join("Q" if col else "." for col in row))
    print()

def is_safe(board, row, col, n):
    # Check this column on the upper side
    for i in range(row):
        if board[i][col]:
            return False

    # Check the upper diagonal on the left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j]:
            return False

    # Check the upper diagonal on the right side
    for i, j in zip(range(row, -1, -1), range(col, n)):
        if board[i][j]:
            return False

    return True

def solve_n_queens_util(board, row, n):
    # Base case: If all queens are placed
    if row >= n:
        print_solution(board)
        return True

    res = False
    for col in range(n):
        if is_safe(board, row, col, n):
            # Place the queen
            board[row][col] = 1

            # Recur to place the rest of the queens
            res = solve_n_queens_util(board, row + 1, n) or res

            # Backtrack: Remove the queen
            board[row][col] = 0

    return res

def solve_n_queens(n):
    # Initialize the board
    board = [[0] * n for _ in range(n)]

    if not solve_n_queens_util(board, 0, n):
        print("No solution exists")
    else:
        print("Solutions printed above")

# Example usage
if __name__ == "__main__":
    n = 4  # Change this value for different board sizes
    solve_n_queens(n)